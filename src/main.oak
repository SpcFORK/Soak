std := import('std')
str := import('str')
fmt := import('fmt')
cli := import('cli')

hlp := import('hlp')
static := import('static')
{ CowNode: CowNode } := import('node')
{ CowError: CowError } := import('util')

fn toBin(number) {
  pl := ''

  with std.loop() fn(amm, breaker) if number > 0 {
    true -> {
      pl <- (number |> int() % 2) |> string() + pl
      number <- int(number / 2)
    }

    _ -> pl |> std.default('0') |> breaker()
  }
}

fn fromBin(encodedNumber) str.split(encodedNumber) |>
  with std.reduce(0) fn(acc, item, count) acc <- acc * 2 + int(item)

fn Soak(Env) Ctx := {
  Env: Env |> std.default(static.Env)
  read: fn read(k) Env.(k)
  assg: fn assg(k, v) Env.(k) <- v
  dele: fn dele(k) assg(k, ?)

  // ---
  // @@ Stack

  Stack: []
  add: fn add(v) Ctx.Stack << v
  ins: fn ins(v) with std.append([v]) Ctx.Stack
  peek: fn peek() Ctx.Stack.(len(Ctx.Stack) - 1)

  pop: fn pop() {
    lastItem := Ctx.Stack.(len(Ctx.Stack) - 1)
    Ctx.Stack <- std.take(Ctx.Stack, len(Ctx.Stack) - 1)

    lastItem
  }

  shuf: fn shuf() {
    // L -> F
    pop() |> ins()
  }

  rshuf: fn rshuf() {
    // F -> L
    shift() |> add()
  }

  shift: fn shift() {
    firstItem := Ctx.Stack.0
    Ctx.Stack <- std.slice(Ctx.Stack, 1)

    firstItem
  }

  drop: fn drop() {
    Ctx.Stack <- std.take(Ctx.Stack, len(Ctx.Stack) - 1)
  }

  dup: fn dup() Ctx.Stack << peek()

  swap: fn swap() {
    topItem := pop()
    secondItem := pop()
    add(topItem)
    add(secondItem)
  }

  over: fn over() {
    secondItem := Ctx.Stack.(len(Ctx.Stack) - 2)
    Ctx.Stack << secondItem
  }

  rot: fn rot() { // cba -> acb
    a := pop()
    b := pop()
    c := pop()
    add(a)
    add(c)
    add(b)
  }

  rotcc: fn rotcc() { // cba -> bac
    a := pop()
    b := pop()
    c := pop()
    add(b)
    add(a)
    add(c)
  }

  // ---
  // @@ Steps

  Steps: []
  clr: fn clr() Ctx.Steps <- []
  stepToNode: fn stepToNode(step) CowNode(step...)

  load: fn load(CowSteps) Ctx.Steps <- std.map(CowSteps, stepToNode)
  pack: fn pack with std.map(Ctx.Steps) fn(e) e.pack()

  _getInst: fn _getInst(i) Ctx.Env.(i |> str.lower())

  _parseInstruction: fn _parseInstruction(item) {
    items := item.code |> str.split(' ')

    operation := _getInst(items.0)
    args := items |> std.slice(1)

    if operation |> type() {
      :function -> operation(Ctx, {
        args: args
        items: items
        item: item
      })

      :null -> CowError('ParseError', 'Invalid instruction!', items.0, Ctx.Stack).throw()
    }
  }

  // ---
  // @@ Registry

  Registry: {}
  setVar: fn setVar(register, value) {
    Ctx.Registry.(register) <- value
  }
  delVar: fn delVar(register, value) setVar(register, ?)
  regGC: fn regGC Ctx.Registry <- {}

  // ---

  _jitStand: fn _jitStand(item) {
    next := item.next(Ctx.Steps)
    if next != ? -> _jitStep(next)
  }

  _jitStep: fn _jitStep(item) {
    _parseInstruction(item)
    _jitStand(item)
  }

  _jitFirstStep: fn _jitFirstStep {
    // We start at Register 0
    item := with std.find(Ctx.Steps) fn(step) step.thisReg = 0
    if item = -1 -> CowError('JIT', 'Failed to find first step!', pack(), Ctx.Stack).throw()

    Ctx.Steps.(item)
  }

  jit: fn jit {
    _jitFirstStep() |> _jitStep()

    // Return last stack item
    Ctx.Stack.(Ctx.Stack |> len() - 1)
  }

  loJit: fn loJit(CowSteps) {
    load(CowSteps)
    jit()
  }
  newLoJit: fn newLoJit(CowSteps) Soak().loJit(CowSteps)

  _encodeArr: fn _encodeArr(arr) with std.map(arr) fn(v) v |>
    codepoint() |>
    toBin() |>
    str.padStart(8, '0')

  compile: fn {
    // The goal of compile is to oredr
    result := ''

    with std.map(Ctx.Steps |> std.values()) fn(step) result <<
      '{{0}} {{1}} {{2}}\n' |> fmt.format(
        step.thisReg
        step.nextReg
        step.code
      )

    result |>
      str.split('') |>
      std.map(_encodeArr) |>
      str.join('')
  }

}

// ---
// @@ CLI

Cli := cli.parse()

if Cli.verb {
  fn CliFull {
    codes := []
    args := Cli.args |> std.clone()

    fn recurse() {
      codes << [
        args.2
        args.0 |> int()
        args.1 |> int()
      ]

      args <- std.takeLast(args, len(args) - 3)
      if len(args) >= 3 -> recurse()
    }

    recurse()

    with std.println() Soak().newLoJit(codes)
  }

  fn CliSemi {
    codes := []
    args := Cli.args |> std.clone()

    x := 0
    z := 0

    fn recurse() {
      codes << [
        args.0
        x <- z
        z <- z + 1
      ]

      args <- std.takeLast(args, len(args) - 1)
      if len(args) >= 1 -> recurse()
    }

    recurse()

    with std.println() Soak().newLoJit(codes)
  }

  fn CliInputSemi {
    ctx := Soak()

    with std.loop() fn(i, break) {
      std.print('(esc to leave) > ')
      evt := input()
      if evt.data |> str.lower() {
        'esc' -> break(0)
        _ -> [evt.data, 0, 1] |>
          ctx.stepToNode() |>
          ctx._parseInstruction() |>
          std.println()
      }
    }

    std.println('Ended Repl session.')
  }

  'srepl' -> CliInputSemi()

  'full' -> CliFull()
  'semi' -> CliSemi()
}

hlp.export!({ Soak: Soak }, 'Soak')