// oak build
__Oak_Modules := {}
__Oak_Import_Aliases := ?
fn __oak_modularize(name, module) __Oak_Modules.(name) := module
fn __oak_module_import(name) if ___runtime_lib?(name) {
	true -> import(name)
	_ -> if type(module := __Oak_Modules.(name)) {
		:null -> if module := __Oak_Modules.(__Oak_Import_Aliases.(name)) {
			? -> import(name)
			_ -> {
				mod := module()
				__Oak_Modules.(name) := mod
				mod
			}
		}
		:function -> {
			m := module()
			__Oak_Modules.(name) := m
			m
		}
		_ -> module
	}
}
(__oak_modularize('src/hlp.oak',fn()(std:=__oak_module_import('std'),fn isJSMode?()keys('') !=[],fn getOakBuiltinName(name)'__oak_'+name,fn getOakName(name)getOakBuiltinName('js_'+name),fn getOakBuiltin(target)if isJSMode?(){true->(globalThis.(getOakBuiltinName(target)))},fn getOakTarget(target)if isJSMode?(){true->(globalThis.(getOakName(target)))},fn s(pl)if isJSMode?(){res:=string(pl)->res.toString(),true->res.toString(),_->res},fn class!(name)if isJSMode?(){true->(eval(s(fmt.format('class {{ 0 }} {}',name))))},fn asyncFn!(args...)if isJSMode?(){true->(eval(s('async ()=>{}')).constructor(asyncFn))},fn platform?()if isJSMode?(){true->if true{globalThis.window !=?->:web,(try(fn()module)).error=?->:node}},fn getExporter()if platform?(){:web->globalThis,:node->module.exports,_->({})},fn export!(mod,webProp?)if platform?(){exp:=getExporter()->exp.(webProp?)<-mod,:web->exp.(webProp?)<-mod,:node->Object.assign(exp,mod)},{asyncFn!:asyncFn!,class!:class!,export!:export!,getExporter:getExporter,getOakBuiltin:getOakBuiltin,getOakBuiltinName:getOakBuiltinName,getOakName:getOakName,getOakTarget:getOakTarget,isJSMode?:isJSMode?,platform?:platform?,s:s,std:std})),__oak_modularize('src/main.oak',fn()(std:=__oak_module_import('std'),str:=__oak_module_import('str'),cli:=__oak_module_import('cli'),hlp:=__oak_module_import('src/hlp.oak'),static:=__oak_module_import('src/static.oak'),{CowNode:CowNode}:=__oak_module_import('src/node.oak'),{CowError:CowError}:=__oak_module_import('src/util.oak'),fn Soak(Env)Ctx:={Env:std.default(Env,static.Env),read:fn read(k)Env.(k),assg:fn assg(k,v)Env.(k)<-v,dele:fn dele(k)assg(k,?),Stack:[],add:fn add(v)Ctx.Stack<<v,ins:fn ins(v)std.append([v],Ctx.Stack),peek:fn peek()Ctx.Stack.(len(Ctx.Stack)-1),pop:fn pop()(lastItem:=Ctx.Stack.(len(Ctx.Stack)-1),Ctx.Stack<-std.take(Ctx.Stack,len(Ctx.Stack)-1),lastItem),shuf:fn shuf()(ins(pop())),rshuf:fn rshuf()(add(shift())),shift:fn shift()(firstItem:=Ctx.Stack.0,Ctx.Stack<-std.slice(Ctx.Stack,1),firstItem),drop:fn drop()(Ctx.Stack<-std.take(Ctx.Stack,len(Ctx.Stack)-1)),dup:fn dup()Ctx.Stack<<peek(),swap:fn swap()(topItem:=pop(),secondItem:=pop(),add(topItem),add(secondItem)),over:fn over()(secondItem:=Ctx.Stack.(len(Ctx.Stack)-2),Ctx.Stack<<secondItem),rot:fn rot()(a:=pop(),b:=pop(),c:=pop(),add(a),add(c),add(b)),rotcc:fn rotcc()(a:=pop(),b:=pop(),c:=pop(),add(b),add(a),add(c)),Steps:[],clr:fn clr()Ctx.Steps<-[],stepToNode:fn stepToNode(step)CowNode(step...),load:fn load(CowSteps)Ctx.Steps<-std.map(CowSteps,stepToNode),pack:fn pack()std.map(Ctx.Steps,fn(e)e.pack()),_getInst:fn _getInst(i)Ctx.Env.(str.lower(i)),_parseInstruction:fn _parseInstruction(item)(items:=str.split(item.code,' '),operation:=_getInst(items.0),args:=std.slice(items,1),if type(operation){:function->operation(Ctx,{args:args,items:items,item:item}),:null->CowError('ParseError','Invalid instruction!',items.0,Ctx.Stack).throw()}),Registry:{},setVar:fn setVar(register,value)(Ctx.Registry.(register)<-value),delVar:fn delVar(register,value)setVar(register,?),regGC:fn regGC()Ctx.Registry<-{},_jitStand:fn _jitStand(item)(next:=item.next(Ctx.Steps),if next !=?{true->_jitStep(next)}),_jitStep:fn _jitStep(item)(_parseInstruction(item),_jitStand(item)),_jitFirstStep:fn _jitFirstStep()(item:=std.find(Ctx.Steps,fn(step)step.thisReg=0),if item=-1{true->CowError('JIT','Failed to find first step!',pack(),Ctx.Stack).throw()},Ctx.Steps.(item)),jit:fn jit()(_jitStep(_jitFirstStep()),Ctx.Stack.(len(Ctx.Stack)-1)),loJit:fn loJit(CowSteps)(load(CowSteps),jit()),newLoJit:fn newLoJit(CowSteps)Soak().loJit(CowSteps)},Cli:=cli.parse(),if Cli.verb{fn CliFull()(codes:=[],args:=std.clone(Cli.args),fn recurse()(codes<<[args.2,int(args.0),int(args.1)],args<-std.takeLast(args,len(args)-3),if len(args)>=3{true->recurse()}),recurse(),std.println(Soak().newLoJit(codes)))->CliInputSemi(),fn CliSemi()(codes:=[],args:=std.clone(Cli.args),x:=0,z:=0,fn recurse()(codes<<[args.0,x<-z,z<-z+1],args<-std.takeLast(args,len(args)-1),if len(args)>=1{true->recurse()}),recurse(),std.println(Soak().newLoJit(codes)))->CliInputSemi(),fn CliInputSemi()(codes:=[],ctx:=Soak(),x:=0,z:=0,std.loop(fn(i,break)(std.print('(esc to leave) > '),evt:=input(),if str.lower(evt.data){'esc'->break(0),_->std.println(ctx._parseInstruction(ctx.stepToNode([evt.data,0,1])))})),std.println('Ended Repl session.'))->CliInputSemi(),'srepl'->CliInputSemi(),'full'->CliFull(),'semi'->CliSemi()},hlp.export!({Soak:Soak},'Soak'),{Cli:Cli,CliFull:CliFull,CliInputSemi:CliInputSemi,CliSemi:CliSemi,CowError:CowError,CowNode:CowNode,Soak:Soak,cli:cli,hlp:hlp,static:static,std:std,str:str})),__oak_modularize('src/node.oak',fn()(std:=__oak_module_import('std'),fn CowNode(code,thisReg,nextReg)Ctx:={code:std.default(code,''),thisReg:std.default(thisReg,0),nextReg:std.default(nextReg,1),pack:fn pack()[Ctx.code,Ctx.thisReg,Ctx.nextReg],_Next:fn _Next(step)step.thisReg=Ctx.nextReg,_Last:fn _Last(step)step.nextReg=Ctx.thisReg,_hasStep:fn _hasStep(steps,mutator)std.find(steps,mutator),_updateStep:fn _updateStep(steps,key,mutator)if Ctx.(key){?->Ctx.(key)<-steps.(_hasStep(steps,mutator)),_->Ctx.(key)},_findStep:fn _findStep(steps,key,mutator)(_updateStep(steps,key,mutator),Ctx.(key)),_nextStep?:?,_lastStep?:?,hasNext:fn hasNext(steps)_hasStep(steps,_Next),hasLast:fn hasLast(steps)_hasStep(steps,_Last),next:fn next(steps)_findStep(steps,'_nextStep?',_Next),last:fn last(steps)_findStep(steps,'_lastStep?',_Last),cache:fn cache(steps)[next(),last()],uncacheNext:fn uncacheNext()Ctx._nextStep?<-?,uncacheLast:fn uncacheLast()Ctx._lastStep?<-?,uncache:fn uncache()(uncacheNext(),uncacheLast())},{CowNode:CowNode,std:std})),__oak_modularize('src/static.oak',fn()(std:=__oak_module_import('std'),str:=__oak_module_import('str'),json:=__oak_module_import('json'),math:=__oak_module_import('math'),{exp:exp,qdiv:qdiv,qd_b4:qd_b4,hkmlt:hkmlt,p2tableLook:hksqr,p3tableLook:hkcub}:=__oak_module_import('src/tables/p2.oak'),{MemCache:MemCache}:=__oak_module_import('src/structures/MemCache.oak'),lower:='abcdefghijklmnopqrstuvwxyz',upper:='ABCDEFGHIJKLMNOPQRSTUVWXYZ',numbers:=[0,1,2,3,4,5,6,7,8,9],symbl:='#$%&*+-./:<=>?@^_`{|}~',bools:=[false,true],chars:=lower+upper+(str.join(std.map(numbers,string),''))+symbl,fn prim(ctx,obj)ctx.Soak.add(obj.(int(ctx.args.0))),ReturnAddr:={addr:-1,'?>':fn addRetAddr(s,c)s.add(ReturnAddr.addr),'?!':fn hasRetAddr(s,c)_bool(math.sign(ReturnAddr.addr)),'?:':fn setRetAddr(s,c)ReturnAddr.addr<-c.args.0,'(?)':fn addReturner(s,c)(cAddr:=ReturnAddr.addr,s.add(fn()c.item.nextReg<-cAddr))},Prims:={'t':fn(s,c)s.add(true),'f':fn(s,c)s.add(false),'#':fn(s,c)s.add(int(c.args.0)),'$':fn(s,c)s.add(c.args.0),'()':fn(s,c)s.add(fn()(?)),'@':fn Goto(s,c)c.item.nextReg<-int(c.args.0),'(^)':fn(s,c)s.add(fn()Goto(s,c)),call:fn(s,c)(inst:=s.pop(),code:=[],std.map(c.args,fn(arg)if arg{'*'->s.pop(),'^'->s.peek(),'s'->s,'c'->c,_->arg}),s.add(inst(code...))),'c-b':fn(s,c)prim(c,bools),'c-lw':fn(s,c)prim(c,lower),'c-up':fn(s,c)prim(c,upper),'c-al':fn(s,c)s.add(len(lower)),'c-nm':fn(s,c)prim(c,numbers),'c-nl':fn(s,c)s.add(len(numbers)),'c-sy':fn(s,c)prim(c,symbl),'c-sl':fn(s,c)s.add(len(symbl)),'c-cs':fn(s,c)prim(c,chars),'c-cl':fn(s,c)s.add(len(chars)),_ioarg:fn _ioarg(s,c,i,h,p)if val:=(c.args).(i){?->s.(std.default(p,'pop'))(),_->std.default(h,string)(val)}},Stack:={drop:fn(s,c)s.drop(),dup:fn(s,c)s.dup(),swap:fn(s,c)s.swap(),over:fn(s,c)s.over(),rot:fn(s,c)s.rot(),rotcc:fn(s,c)s.rotcc(),shuf:fn(s,c)s.shuf(),rshuf:fn(s,c)s.rshuf()},Adding:={qadd:fn(s,c)s.add(s.pop()+s.pop()),_intOrFloat:fn _intOrFloat(v)if v:=int(v){?->float(v),_->v},add:fn(s,c)s.add(_ioarg(s,c,0,_intOrFloat)+_ioarg(s,c,1,_intOrFloat)),qinc:fn(s,c)s.add(s.pop()+1),inc:fn(s,c)s.add(_ioarg(s,c,0,_intOrFloat)+1)},Subtr:={qsub:fn(s,c)s.add(s.pop()-s.pop()),sub:fn(s,c)s.add(_ioarg(s,c,0,_intOrFloat)-_ioarg(s,c,1,_intOrFloat)),dec:fn(s,c)(val:=_ioarg(s,c,0,_intOrFloat)-1,s.add(val))},Mult:={qmlt:fn(s,c)s.add(s.pop()*s.pop()),mlt:fn(s,c)s.add(_ioarg(s,c,0,_intOrFloat)*_ioarg(s,c,1,_intOrFloat)),_hksqr:hksqr,qhksqr:fn(s,c)s.add(hksqr(s.pop())),hksqr:fn(s,c)s.add(hksqr(_ioarg(s,c,0,_intOrFloat))),_hkcub:hkcub,qhkcub:fn(s,c)s.add(hksqr(s.pop())),hkcub:fn(s,c)s.add(hkcub(_ioarg(s,c,0,_intOrFloat))),_qd_b4:qd_b4,_hkmlt:hkmlt,qhkmlt:fn(s,c)s.add(hkmlt(s.pop(),s.pop())),hkmlt:fn(s,c)s.add(hkmlt(_ioarg(s,c,0,_intOrFloat),_ioarg(s,c,1,_intOrFloat)))},Div:={div:fn(s,c)s.add(_ioarg(s,c,0,_intOrFloat)/_ioarg(s,c,1,_intOrFloat)),_exp:exp,exp:fn(s,c)s.add(exp(s.pop())),_qdiv:qdiv,hkdiv:fn(s,c)s.add(qdiv(_ioarg(s,c,0,_intOrFloat),_ioarg(s,c,1,_intOrFloat))),qhkdiv:fn(s,c)s.add(qdiv(s.pop(),s.pop()))},Pow:={pow:fn(s,c)s.add(pow(_ioarg(s,c,0,_intOrFloat),_ioarg(s,c,1,_intOrFloat))),qpow:fn(s,c)s.add(pow(s.pop(),s.pop())),_hkpow:fn _hkpow(a,b)if b{0->1,_->hkmlt(a,_hkpow(a,b-1))},qhkpow:fn(s,c)s.add(_hkpow(s.pop(),s.pop())),hkpow:fn(s,c)s.add(_hkpow(_ioarg(s,c,0,_intOrFloat),_ioarg(s,c,1,_intOrFloat)))},Mod:={qmod:fn(s,c)s.add(s.pop()%s.pop()),mod:fn(s,c)s.add(_ioarg(s,c,0)%_ioarg(s,c,1))},Trig:={sin:fn(s,c)s.add(sin(_ioarg(s,c,0,_intOrFloat))),qsin:fn(s,c)s.add(sin(s.pop())),cos:fn(s,c)s.add(cos(_ioarg(s,c,0,_intOrFloat))),qcos:fn(s,c)s.add(cos(s.pop())),tan:fn(s,c)s.add(tan(_ioarg(s,c,0,_intOrFloat))),qtan:fn(s,c)s.add(tan(s.pop()))},Sqrt:={qsqrt:fn(s,c)s.add(math.sqrt(s.pop())),sqrt:fn(s,c)s.add(math.sqrt(_ioarg(s,c,0,_intOrFloat))),_hksqrt:fn _hksqrt(n)if n>=0{true->_hkpow(n,0.5)},hksqrt:fn(s,c)s.add(_hksqrt(_ioarg(s,c,0,_intOrFloat))),qhksqrt:fn(s,c)s.add(_hksqrt(s.pop()))},Abs:={abs:fn(s,c)s.add(math.abs(_ioarg(s,c,0,_intOrFloat))),qabs:fn(s,c)s.add(math.abs(s.pop())),hkabs:fn(s,c)s.add(_hksqrt(_hkpow(_ioarg(s,c,0,_intOrFloat),2))),qhkabs:fn(s,c)s.add(_hksqrt(_hkpow(s.pop(),2)))},Bitwise:={band:fn(s,c)s.add(_ioarg(s,c,0,_intOrFloat)&_ioarg(s,c,1,_intOrFloat)),qband:fn(s,c)s.add(s.pop()&s.pop()),bor:fn(s,c)s.add(_ioarg(s,c,0,_intOrFloat)|_ioarg(s,c,1,_intOrFloat)),qbor:fn(s,c)s.add(s.pop()|s.pop()),bxor:fn(s,c)s.add(_ioarg(s,c,0,_intOrFloat)^_ioarg(s,c,1,_intOrFloat)),qbxor:fn(s,c)s.add(s.pop()^s.pop()),qlshift:fn(s,c)(positions:=s.pop(),value:=s.pop(),result:=value*pow(2,positions),s.add(result)),lshift:fn(s,c)(value:=_ioarg(s,c,0,_intOrFloat),positions:=_ioarg(s,c,1,_intOrFloat),result:=value*pow(2,positions),s.add(result)),qrshift:fn(s,c)(positions:=s.pop(),value:=s.pop(),result:=value/pow(2,positions),s.add(result)),rshift:fn(s,c)(value:=_ioarg(s,c,0,_intOrFloat),positions:=_ioarg(s,c,1,_intOrFloat),result:=value/pow(2,positions),s.add(result)),hklshift:fn(s,c)(value:=_ioarg(s,c,0,_intOrFloat),positions:=_ioarg(s,c,1,_intOrFloat),result:=hkmlt(value,_hkpow(2,positions)),s.add(result)),qhklshift:fn(s,c)(positions:=s.pop(),value:=s.pop(),result:=hkmlt(value,_hkpow(2,positions)),s.add(result)),hkrshift:fn(s,c)(value:=_ioarg(s,c,0,_intOrFloat),positions:=_ioarg(s,c,1,_intOrFloat),result:=value/_hkpow(2,positions),s.add(result)),qhkrshift:fn(s,c)(positions:=s.pop(),value:=s.pop(),result:=value/_hkpow(2,positions),s.add(result))},Hex:={fromhex:fn(s,c)s.add(std.fromHex(_ioarg(s,c,0,string))),tohex:fn(s,c)s.add(std.toHex(_ioarg(s,c,0,int)))},Math:=std.merge(Adding,Subtr,Mult,Div,Pow,Mod,Trig,Sqrt,Abs,Bitwise,Hex),BoolOps:={_bool:fn _bool(a)if a{true->true,1->true,false->false,0->false},eq:fn(s,c)s.add(_ioarg(s,c,0,_bool)=_ioarg(s,c,1,_bool)),qeq:fn(s,c)s.add(s.pop()=s.pop()),neq:fn(s,c)s.add(_ioarg(s,c,0,_bool) !=_ioarg(s,c,1,_bool)),qneq:fn(s,c)s.add(s.pop() !=s.pop()),not:fn(s,c)s.add(!_ioarg(s,c,0,_bool)),qnot:fn(s,c)s.add(!s.pop()),and:fn(s,c)s.add(_ioarg(s,c,0,_bool)&_ioarg(s,c,1,_bool)),qand:fn(s,c)s.add(s.pop()&s.pop()),ora:fn(s,c)s.add(_ioarg(s,c,0,_bool)|_ioarg(s,c,1,_bool)),qora:fn(s,c)s.add(s.pop()|s.pop()),eor:fn(s,c)(lhs:=_ioarg(s,c,0,_bool),rhs:=_ioarg(s,c,0,_bool),s.add((lhs&!rhs)|(!lhs&rhs))),qeor:fn(s,c)(lhs:=_bool(s.pop()),rhs:=_bool(s.pop()),s.add((lhs&!rhs)|(!lhs&rhs)))},MemOps:={MemCache:MemCache(),mc_addctx:fn(s,c)(newCtx:=_ioarg(s,c,0,string),MemOps.MemCache.addCtx(newCtx)),mc_hasctx:fn(s,c)(ctx:=_ioarg(s,c,0,string),s.add(MemOps.MemCache.hasCtxAt(ctx) !=-1)),mc_getctx:fn(s,c)(ctx:=_ioarg(s,c,0,string),s.add(MemOps.MemCache.getCtx(ctx))),mc_newctx:fn(s,c)(ctx:=_ioarg(s,c,0,string),newData:=s.pop(),MemOps.MemCache.updateCtx(ctx,newData)),mc_delctx:fn(s,c)(ctx:=_ioarg(s,c,0,string),MemOps.MemCache.delCtx(ctx)),mc_gc:fn(s,c)(MemOps.MemCache.gc()),mc_setkey:fn(s,c)(ctx:=_ioarg(s,c,0,string),key:=_ioarg(s,c,1,string),value:=s.pop(),MemOps.MemCache.setKey(ctx,key,value)),mc_getkey:fn(s,c)(ctx:=_ioarg(s,c,0,string),key:=_ioarg(s,c,1,string),s.add(MemOps.MemCache.getKey(ctx,key))),mc_haskey:fn(s,c)(ctx:=_ioarg(s,c,0,string),key:=_ioarg(s,c,1,string),s.add(MemOps.MemCache.hasKey(ctx,key) !=null)),pick:fn(s,c)(n:=_ioarg(s,c,0,int),s.add(s.Stack.(len(s.Stack)-1-n))),store:fn(s,c)(key:=_ioarg(s,c,0),value:=s.pop(),s.Registry.(key)<-value),load:fn(s,c)(key:=_ioarg(s,c,0),s.add(s.Registry.(key))),regcl:fn(s,c)s.regGC()},TransferOps:={tax:fn(s,c)(xRegister:=s.pop(),aRegister:=xRegister,s.add(aRegister)),tay:fn(s,c)(yRegister:=s.pop(),aRegister:=yRegister,s.add(aRegister)),txa:fn(s,c)(aRegister:=s.pop(),xRegister:=aRegister,s.add(xRegister)),tya:fn(s,c)(aRegister:=s.pop(),yRegister:=aRegister,s.add(yRegister)),tsx:fn(s,c)(xRegister:=s.pop(),stackPointer:=xRegister,s.add(stackPointer)),txs:fn(s,c)(stackPointer:=s.pop(),xRegister:=stackPointer,s.add(xRegister))},CastOps:={toint:fn(s,c)s.add(int(_ioarg(s,c,0))),tostr:fn(s,c)s.add(string(_ioarg(s,c,0))),tobool:fn(s,c)s.add(bool(_ioarg(s,c,0))),tofloat:fn(s,c)s.add(float(_ioarg(s,c,0)))},StringOps:={concat:fn(s,c)s.add(_ioarg(s,c,0,string)<<_ioarg(s,c,1,string)),substr:fn(s,c)(str:=_ioarg(s,c,0,string),start:=_ioarg(s,c,1,int),end:=_ioarg(s,c,2,int),s.add(str.substring(start,end))),length:fn(s,c)s.add(len(_ioarg(s,c,0,string)))},ListOps:={map:fn(s,c)(list:=_ioarg(s,c,0,json.parse),func:=s.pop(),s.add(std.map(list,func))),filter:fn(s,c)(list:=_ioarg(s,c,0,json.parse),func:=s.pop(),s.add(std.filter(list,func))),reduce:fn(s,c)(list:=_ioarg(s,c,0,json.parse),func:=s.pop(),initial:=_ioarg(s,c,1),s.add(std.reduce(list,func,initial))),length:fn(s,c)(list:=_ioarg(s,c,0,json.parse),s.add(len(list))),append:fn(s,c)(list:=_ioarg(s,c,0,json.parse),elem:=s.pop(),list<<elem,s.add(list)),indexOf:fn(s,c)(list:=_ioarg(s,c,0,json.parse),elem:=s.pop(),index:=std.find(list,fn(item)item=elem),s.add(index)),contains:fn(s,c)(list:=_ioarg(s,c,0,json.parse),elem:=s.pop(),exists:=std.find(list,fn(item)item=elem) !=-1,s.add(exists))},ObjOps:={new:fn(s,c)(properties:=_ioarg(s,c,0,json.parse),obj:=std.clone(properties),s.add(obj)),get:fn(s,c)(obj:=_ioarg(s,c,0,json.parse),propName:=_ioarg(s,c,1,string),propValue:=obj.(propName),s.add(propValue)),set:fn(s,c)(obj:=_ioarg(s,c,0,json.parse),propName:=_ioarg(s,c,1,string),propValue:=_ioarg(s,c,2),obj.(propName)<-propValue),has:fn(s,c)(obj:=_ioarg(s,c,0,json.parse),propName:=_ioarg(s,c,1,string),exists:=obj.(propName) !=?,s.add(exists)),remove:fn(s,c)(obj:=_ioarg(s,c,0,json.parse),propName:=_ioarg(s,c,1,string),obj.(propName)<-?),keys:fn(s,c)(obj:=_ioarg(s,c,0,json.parse),keys:=keys(obj),s.add(keys)),values:fn(s,c)(obj:=_ioarg(s,c,0,object),values:=std.values(obj),s.add(values)),entries:fn(s,c)(obj:=_ioarg(s,c,0,object),entries:=std.entries(obj),s.add(entries))},ControlFlow:={'if':fn(s,c)(condition:=s.pop(),true_branch:=s.pop(),false_branch:=s.pop(),result:=if condition{true->true_branch(),_->false_branch()},s.add(result)),loop:fn(s,c)(condition:=s.pop(),body:=s.pop(),std.loop(body))},Memoization:={_cache:{},_get_or_compute:fn _get_or_compute(key,func,args)if Memoization._cache.(key){?->func(args...),cached->cached},memoize:fn(s,c)(func:=s.pop(),fn memoized(args...)(key:=str.join(',',args),result:=_get_or_compute(key,func,args),Memoization._cache.(key)<-result,result),s.add(memoized)),clear_cache:fn(s,c)(Memoization._cache<-{})},Jump:={jump:fn jump(s,c)c.item.nextReg<-_ioarg(s,c,0,int),jmif:fn(s,c)if _ioarg(s,c,0,int,'peek'){false->jump(s,c),0->jump(s,c)},subrt:fn(s,c)(index:=std.find(s.Steps,fn(step)step=_ioarg(s,c,0,int)),s._jitStep(s.Steps.(index)))},Importing:={std:fn(s,c)(module:=_ioarg(s,c,0,string),imported:=__oak_module_import(module),s.add(imported))},Env:=std.merge(ReturnAddr,Prims,Stack,Math,BoolOps,MemOps,TransferOps,CastOps,StringOps,ListOps,ObjOps,ControlFlow,Memoization,Jump,Importing),{Abs:Abs,Adding:Adding,Bitwise:Bitwise,BoolOps:BoolOps,CastOps:CastOps,ControlFlow:ControlFlow,Div:Div,Env:Env,Goto:Goto,Hex:Hex,Importing:Importing,Jump:Jump,ListOps:ListOps,Math:Math,MemCache:MemCache,MemOps:MemOps,Memoization:Memoization,Mod:Mod,Mult:Mult,ObjOps:ObjOps,Pow:Pow,Prims:Prims,ReturnAddr:ReturnAddr,Sqrt:Sqrt,Stack:Stack,StringOps:StringOps,Subtr:Subtr,TransferOps:TransferOps,Trig:Trig,_bool:_bool,_get_or_compute:_get_or_compute,_hkpow:_hkpow,_hksqrt:_hksqrt,_intOrFloat:_intOrFloat,_ioarg:_ioarg,addRetAddr:addRetAddr,addReturner:addReturner,bools:bools,chars:chars,exp:exp,hasRetAddr:hasRetAddr,hkcub:hkcub,hkmlt:hkmlt,hksqr:hksqr,json:json,jump:jump,lower:lower,math:math,numbers:numbers,prim:prim,qd_b4:qd_b4,qdiv:qdiv,setRetAddr:setRetAddr,std:std,str:str,symbl:symbl,upper:upper})),__oak_modularize('src/structures/MemCache.oak',fn()(std:=__oak_module_import('std'),fn MemCache()Ctx:={store:[],addCtx:fn addCtx(NewCx)Ctx.store<<[NewCx,{}],hasCtxAt:fn hasCtxAt(Cx)std.find(Ctx.store,fn(store)store.0=Cx),getCtx:fn getCtx(Cx)Ctx.store.(hasCtxAt(Cx)),updateCtx:fn updateCtx(Cx,NewData)Ctx.store.(hasCtxAt(Cx))<-[Cx,NewData],setKey:fn setKey(Cx,Key,Value)(ind:=hasCtxAt(Cx),if ind !=-1{true->(Ctx.store.(ind).1).(Key)<-Value}),getKey:fn getKey(Cx,Key)(ind:=hasCtxAt(Cx),if ind !=-1{true->(Ctx.store.(ind).1).(Key)}),hasKey:fn hasKey(Cx,Key)(ind:=hasCtxAt(Cx),if ind !=-1{true->std.find(keys(Ctx.store.(ind).1),fn(i)i=Key)}),delCtx:fn delCtx(Cx)(ind:=hasCtxAt(Cx),Ctx.store<-std.merge(std.slice(Ctx.store,0,ind-1),std.slice(Ctx.store,ind+1))),gc:fn()Ctx.store<-[]},{MemCache:MemCache,std:std})),__oak_modularize('src/tables/p2.oak',fn()(p2table:=[['65536','65025','64516','64009','63504','63001','62500','62001','61504','61009','60516','60025','59536','59049','58564','58081','57600','57121','56644','56169','55696','55225','54756','54289','53824','53361','52900','52441','51984','51529','51076','50625','50176','49729','49284','48841','48400','47961','47524','47089','46656','46225','45796','45369','44944','44521','44100','43681','43264','42849','42436','42025','41616','41209','40804','40401','40000','39601','39204','38809','38416','38025','37636','37249','36864','36481','36100','35721','35344','34969','34596','34225','33856','33489','33124','32761','32400','32041','31684','31329','30976','30625','30276','29929','29584','29241','28900','28561','28224','27889','27556','27225','26896','26569','26244','25921','25600','25281','24964','24649','24336','24025','23716','23409','23104','22801','22500','22201','21904','21609','21316','21025','20736','20449','20164','19881','19600','19321','19044','18769','18496','18225','17956','17689','17424','17161','16900','16641','16384','16129','15876','15625','15376','15129','14884','14641','14400','14161','13924','13689','13456','13225','12996','12769','12544','12321','12100','11881','11664','11449','11236','11025','10816','10609','10404','10201','10000','9801','9604','9409','9216','9025','8836','8649','8464','8281','8100','7921','7744','7569','7396','7225','7056','6889','6724','6561','6400','6241','6084','5929','5776','5625','5476','5329','5184','5041','4900','4761','4624','4489','4356','4225','4096','3969','3844','3721','3600','3481','3364','3249','3136','3025','2916','2809','2704','2601','2500','2401','2304','2209','2116','2025','1936','1849','1764','1681','1600','1521','1444','1369','1296','1225','1156','1089','1024','961','900','841','784','729','676','625','576','529','484','441','400','361','324','289','256','225','196','169','144','121','100','81','64','49','36','25','16','9','4','1','0','1','4','9','16','25','36','49','64','81','100','121','144','169','196','225','256','289','324','361','400','441','484','529','576','625','676','729','784','841','900','961','1024','1089','1156','1225','1296','1369','1444','1521','1600','1681','1764','1849','1936','2025','2116','2209','2304','2401','2500','2601','2704','2809','2916','3025','3136','3249','3364','3481','3600','3721','3844','3969','4096','4225','4356','4489','4624','4761','4900','5041','5184','5329','5476','5625','5776','5929','6084','6241','6400','6561','6724','6889','7056','7225','7396','7569','7744','7921','8100','8281','8464','8649','8836','9025','9216','9409','9604','9801','10000','10201','10404','10609','10816','11025','11236','11449','11664','11881','12100','12321','12544','12769','12996','13225','13456','13689','13924','14161','14400','14641','14884','15129','15376','15625','15876','16129','16384','16641','16900','17161','17424','17689','17956','18225','18496','18769','19044','19321','19600','19881','20164','20449','20736','21025','21316','21609','21904','22201','22500','22801','23104','23409','23716','24025','24336','24649','24964','25281','25600','25921','26244','26569','26896','27225','27556','27889','28224','28561','28900','29241','29584','29929','30276','30625','30976','31329','31684','32041','32400','32761','33124','33489','33856','34225','34596','34969','35344','35721','36100','36481','36864','37249','37636','38025','38416','38809','39204','39601','40000','40401','40804','41209','41616','42025','42436','42849','43264','43681','44100','44521','44944','45369','45796','46225','46656','47089','47524','47961','48400','48841','49284','49729','50176','50625','51076','51529','51984','52441','52900','53361','53824','54289','54756','55225','55696','56169','56644','57121','57600','58081','58564','59049','59536','60025','60516','61009','61504','62001','62500','63001','63504','64009','64516'],256],p3table:=[['-1.6777216e+07','-1.6581375e+07','-1.6387064e+07','-1.6194277e+07','-1.6003008e+07','-1.5813251e+07','-1.5625e+07','-1.5438249e+07','-1.5252992e+07','-1.5069223e+07','-1.4886936e+07','-1.4706125e+07','-1.4526784e+07','-1.4348907e+07','-1.4172488e+07','-1.3997521e+07','-1.3824e+07','-1.3651919e+07','-1.3481272e+07','-1.3312053e+07','-1.3144256e+07','-1.2977875e+07','-1.2812904e+07','-1.2649337e+07','-1.2487168e+07','-1.2326391e+07','-1.2167e+07','-1.2008989e+07','-1.1852352e+07','-1.1697083e+07','-1.1543176e+07','-1.1390625e+07','-1.1239424e+07','-1.1089567e+07','-1.0941048e+07','-1.0793861e+07','-1.0648e+07','-1.0503459e+07','-1.0360232e+07','-1.0218313e+07','-1.0077696e+07','-9.938375e+06','-9.800344e+06','-9.663597e+06','-9.528128e+06','-9.393931e+06','-9.261e+06','-9.129329e+06','-8.998912e+06','-8.869743e+06','-8.741816e+06','-8.615125e+06','-8.489664e+06','-8.365427e+06','-8.242408e+06','-8.120601e+06','-8e+06','-7.880599e+06','-7.762392e+06','-7.645373e+06','-7.529536e+06','-7.414875e+06','-7.301384e+06','-7.189057e+06','-7.077888e+06','-6.967871e+06','-6.859e+06','-6.751269e+06','-6.644672e+06','-6.539203e+06','-6.434856e+06','-6.331625e+06','-6.229504e+06','-6.128487e+06','-6.028568e+06','-5.929741e+06','-5.832e+06','-5.735339e+06','-5.639752e+06','-5.545233e+06','-5.451776e+06','-5.359375e+06','-5.268024e+06','-5.177717e+06','-5.088448e+06','-5.000211e+06','-4.913e+06','-4.826809e+06','-4.741632e+06','-4.657463e+06','-4.574296e+06','-4.492125e+06','-4.410944e+06','-4.330747e+06','-4.251528e+06','-4.173281e+06','-4.096e+06','-4.019679e+06','-3.944312e+06','-3.869893e+06','-3.796416e+06','-3.723875e+06','-3.652264e+06','-3.581577e+06','-3.511808e+06','-3.442951e+06','-3.375e+06','-3.307949e+06','-3.241792e+06','-3.176523e+06','-3.112136e+06','-3.048625e+06','-2.985984e+06','-2.924207e+06','-2.863288e+06','-2.803221e+06','-2.744e+06','-2.685619e+06','-2.628072e+06','-2.571353e+06','-2.515456e+06','-2.460375e+06','-2.406104e+06','-2.352637e+06','-2.299968e+06','-2.248091e+06','-2.197e+06','-2.146689e+06','-2.097152e+06','-2.048383e+06','-2.000376e+06','-1.953125e+06','-1.906624e+06','-1.860867e+06','-1.815848e+06','-1.771561e+06','-1.728e+06','-1.685159e+06','-1.643032e+06','-1.601613e+06','-1.560896e+06','-1.520875e+06','-1.481544e+06','-1.442897e+06','-1.404928e+06','-1.367631e+06','-1.331e+06','-1.295029e+06','-1.259712e+06','-1.225043e+06','-1.191016e+06','-1.157625e+06','-1.124864e+06','-1.092727e+06','-1.061208e+06','-1.030301e+06','-1e+06','-970299','-941192','-912673','-884736','-857375','-830584','-804357','-778688','-753571','-729000','-704969','-681472','-658503','-636056','-614125','-592704','-571787','-551368','-531441','-512000','-493039','-474552','-456533','-438976','-421875','-405224','-389017','-373248','-357911','-343000','-328509','-314432','-300763','-287496','-274625','-262144','-250047','-238328','-226981','-216000','-205379','-195112','-185193','-175616','-166375','-157464','-148877','-140608','-132651','-125000','-117649','-110592','-103823','-97336','-91125','-85184','-79507','-74088','-68921','-64000','-59319','-54872','-50653','-46656','-42875','-39304','-35937','-32768','-29791','-27000','-24389','-21952','-19683','-17576','-15625','-13824','-12167','-10648','-9261','-8000','-6859','-5832','-4913','-4096','-3375','-2744','-2197','-1728','-1331','-1000','-729','-512','-343','-216','-125','-64','-27','-8','-1','0','1','8','27','64','125','216','343','512','729','1000','1331','1728','2197','2744','3375','4096','4913','5832','6859','8000','9261','10648','12167','13824','15625','17576','19683','21952','24389','27000','29791','32768','35937','39304','42875','46656','50653','54872','59319','64000','68921','74088','79507','85184','91125','97336','103823','110592','117649','125000','132651','140608','148877','157464','166375','175616','185193','195112','205379','216000','226981','238328','250047','262144','274625','287496','300763','314432','328509','343000','357911','373248','389017','405224','421875','438976','456533','474552','493039','512000','531441','551368','571787','592704','614125','636056','658503','681472','704969','729000','753571','778688','804357','830584','857375','884736','912673','941192','970299','1e+06','1.030301e+06','1.061208e+06','1.092727e+06','1.124864e+06','1.157625e+06','1.191016e+06','1.225043e+06','1.259712e+06','1.295029e+06','1.331e+06','1.367631e+06','1.404928e+06','1.442897e+06','1.481544e+06','1.520875e+06','1.560896e+06','1.601613e+06','1.643032e+06','1.685159e+06','1.728e+06','1.771561e+06','1.815848e+06','1.860867e+06','1.906624e+06','1.953125e+06','2.000376e+06','2.048383e+06','2.097152e+06','2.146689e+06','2.197e+06','2.248091e+06','2.299968e+06','2.352637e+06','2.406104e+06','2.460375e+06','2.515456e+06','2.571353e+06','2.628072e+06','2.685619e+06','2.744e+06','2.803221e+06','2.863288e+06','2.924207e+06','2.985984e+06','3.048625e+06','3.112136e+06','3.176523e+06','3.241792e+06','3.307949e+06','3.375e+06','3.442951e+06','3.511808e+06','3.581577e+06','3.652264e+06','3.723875e+06','3.796416e+06','3.869893e+06','3.944312e+06','4.019679e+06','4.096e+06','4.173281e+06','4.251528e+06','4.330747e+06','4.410944e+06','4.492125e+06','4.574296e+06','4.657463e+06','4.741632e+06','4.826809e+06','4.913e+06','5.000211e+06','5.088448e+06','5.177717e+06','5.268024e+06','5.359375e+06','5.451776e+06','5.545233e+06','5.639752e+06','5.735339e+06','5.832e+06','5.929741e+06','6.028568e+06','6.128487e+06','6.229504e+06','6.331625e+06','6.434856e+06','6.539203e+06','6.644672e+06','6.751269e+06','6.859e+06','6.967871e+06','7.077888e+06','7.189057e+06','7.301384e+06','7.414875e+06','7.529536e+06','7.645373e+06','7.762392e+06','7.880599e+06','8e+06','8.120601e+06','8.242408e+06','8.365427e+06','8.489664e+06','8.615125e+06','8.741816e+06','8.869743e+06','8.998912e+06','9.129329e+06','9.261e+06','9.393931e+06','9.528128e+06','9.663597e+06','9.800344e+06','9.938375e+06','1.0077696e+07','1.0218313e+07','1.0360232e+07','1.0503459e+07','1.0648e+07','1.0793861e+07','1.0941048e+07','1.1089567e+07','1.1239424e+07','1.1390625e+07','1.1543176e+07','1.1697083e+07','1.1852352e+07','1.2008989e+07','1.2167e+07','1.2326391e+07','1.2487168e+07','1.2649337e+07','1.2812904e+07','1.2977875e+07','1.3144256e+07','1.3312053e+07','1.3481272e+07','1.3651919e+07','1.3824e+07','1.3997521e+07','1.4172488e+07','1.4348907e+07','1.4526784e+07','1.4706125e+07','1.4886936e+07','1.5069223e+07','1.5252992e+07','1.5438249e+07','1.5625e+07','1.5813251e+07','1.6003008e+07','1.6194277e+07','1.6387064e+07'],256],fn tableLookup(i,table)float((table.0).(i+table.1)),fn p2tableLook(i)tableLookup(i,p2table),fn p3tableLook(i)tableLookup(i,p2table),fn exp(x)pow(math.E,x),fn qdiv(a,b)exp(log(a)-log(b)),fn qd_b4(x)if r:=tableLookup(x){?->pow(x,2),_->r}/4,fn hkmlt(a,b)if true{a=1->1,b=1->1,_->qd_b4(a+b)-qd_b4(a-b)},{exp:exp,hkmlt:hkmlt,p2table:p2table,p2tableLook:p2tableLook,p3table:p3table,p3tableLook:p3tableLook,qd_b4:qd_b4,qdiv:qdiv,tableLookup:tableLookup})),__oak_modularize('src/util.oak',fn()(std:=__oak_module_import('std'),fmt:=__oak_module_import('fmt'),fn CowError(name,message,cause,stack)(Ctx:={name:std.default(name,''),cause:std.default(cause,?),stack:std.default(stack,''),message:std.default(message,''),throw:fn(args...)(std.println(fmt.format('{{0}} -> {{1}}:',Ctx.name,Ctx.message)),std.println(' ',Ctx.cause),std.println(' ',Ctx.stack),exit(1))}),{CowError:CowError,fmt:fmt,std:std})),__Oak_Import_Aliases<-{'std':'std.oak','str':'str.oak','math':'math.oak','sort':'sort.oak','random':'random.oak','fs':'fs.oak','fmt':'fmt.oak','json':'json.oak','datetime':'datetime.oak','path':'path.oak','http':'http.oak','test':'test.oak','debug':'debug.oak','cli':'cli.oak','md':'md.oak','crypto':'crypto.oak','syntax':'syntax.oak'},__oak_module_import('src/main.oak'))